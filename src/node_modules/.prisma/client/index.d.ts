
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model users
 * 
 */
export type users = {
  id: string
  username: string
  password: string
  group_id: number
  created_at: Date
  update_at: Date
}

/**
 * Model groups
 * 
 */
export type groups = {
  id: number
  name: string
  permissions: Prisma.JsonValue
  created_at: Date
  update_at: Date
}

/**
 * Model authorization_clients
 * 
 */
export type authorization_clients = {
  id: string
  client_name: string
  client_id: string
  client_secret: string
  scope: string
  developer_id: string
  avatar: string
  created_at: Date
  updated_at: Date
}

/**
 * Model authorization_refresh_codes
 * 
 */
export type authorization_refresh_codes = {
  id: string
  code: string
  uid: string
  client_id: string
  created_at: Date
  updated_at: Date
}

/**
 * Model authorization_codes
 * 
 */
export type authorization_codes = {
  id: string
  code: string
  uid: string
  client_id: string
  created_at: Date
  updated_at: Date
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<GlobalReject>;

  /**
   * `prisma.groups`: Exposes CRUD operations for the **groups** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Groups
    * const groups = await prisma.groups.findMany()
    * ```
    */
  get groups(): Prisma.groupsDelegate<GlobalReject>;

  /**
   * `prisma.authorization_clients`: Exposes CRUD operations for the **authorization_clients** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Authorization_clients
    * const authorization_clients = await prisma.authorization_clients.findMany()
    * ```
    */
  get authorization_clients(): Prisma.authorization_clientsDelegate<GlobalReject>;

  /**
   * `prisma.authorization_refresh_codes`: Exposes CRUD operations for the **authorization_refresh_codes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Authorization_refresh_codes
    * const authorization_refresh_codes = await prisma.authorization_refresh_codes.findMany()
    * ```
    */
  get authorization_refresh_codes(): Prisma.authorization_refresh_codesDelegate<GlobalReject>;

  /**
   * `prisma.authorization_codes`: Exposes CRUD operations for the **authorization_codes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Authorization_codes
    * const authorization_codes = await prisma.authorization_codes.findMany()
    * ```
    */
  get authorization_codes(): Prisma.authorization_codesDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.11.0
   * Query Engine version: b371888aaf8f51357c7457d836b86d12da91658b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    users: 'users',
    groups: 'groups',
    authorization_clients: 'authorization_clients',
    authorization_refresh_codes: 'authorization_refresh_codes',
    authorization_codes: 'authorization_codes'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    group_id: number | null
  }

  export type UsersSumAggregateOutputType = {
    group_id: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
    group_id: number | null
    created_at: Date | null
    update_at: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
    group_id: number | null
    created_at: Date | null
    update_at: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    username: number
    password: number
    group_id: number
    created_at: number
    update_at: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    group_id?: true
  }

  export type UsersSumAggregateInputType = {
    group_id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
    group_id?: true
    created_at?: true
    update_at?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
    group_id?: true
    created_at?: true
    update_at?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    group_id?: true
    created_at?: true
    update_at?: true
    _all?: true
  }

  export type UsersAggregateArgs = {
    /**
     * Filter which users to aggregate.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs = {
    where?: usersWhereInput
    orderBy?: Enumerable<usersOrderByWithAggregationInput>
    by: Array<UsersScalarFieldEnum>
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    id: string
    username: string
    password: string
    group_id: number
    created_at: Date
    update_at: Date
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect = {
    id?: boolean
    username?: boolean
    password?: boolean
    group_id?: boolean
    created_at?: boolean
    update_at?: boolean
  }

  export type usersGetPayload<
    S extends boolean | null | undefined | usersArgs,
    U = keyof S
      > = S extends true
        ? users
    : S extends undefined
    ? never
    : S extends usersArgs | usersFindManyArgs
    ?'include' extends U
    ? users 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof users ? users[P] : never
  } 
    : users
  : users


  type usersCountArgs = Merge<
    Omit<usersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }
  >

  export interface usersDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, usersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'users'> extends True ? CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>> : CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, usersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'users'> extends True ? CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>> : CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs>(
      args?: SelectSubset<T, usersFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<users>>, PrismaPromise<Array<usersGetPayload<T>>>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs>(
      args: SelectSubset<T, usersCreateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs>(
      args?: SelectSubset<T, usersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs>(
      args: SelectSubset<T, usersDeleteArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs>(
      args: SelectSubset<T, usersUpdateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs>(
      args?: SelectSubset<T, usersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs>(
      args: SelectSubset<T, usersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs>(
      args: SelectSubset<T, usersUpsertArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usersClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * users findUnique
   */
  export type usersFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Throw an Error if a users can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which users to fetch.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users findFirst
   */
  export type usersFindFirstArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Throw an Error if a users can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     * 
    **/
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users findMany
   */
  export type usersFindManyArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users create
   */
  export type usersCreateArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * The data needed to create a users.
     * 
    **/
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs = {
    /**
     * The data used to create many users.
     * 
    **/
    data: Enumerable<usersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * users update
   */
  export type usersUpdateArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * The data needed to update a users.
     * 
    **/
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs = {
    /**
     * The data used to update users.
     * 
    **/
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     * 
    **/
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * The filter to search for the users to update in case it exists.
     * 
    **/
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     * 
    **/
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Filter which users to delete.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs = {
    /**
     * Filter which users to delete
     * 
    **/
    where?: usersWhereInput
  }


  /**
   * users without action
   */
  export type usersArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
  }



  /**
   * Model groups
   */


  export type AggregateGroups = {
    _count: GroupsCountAggregateOutputType | null
    _avg: GroupsAvgAggregateOutputType | null
    _sum: GroupsSumAggregateOutputType | null
    _min: GroupsMinAggregateOutputType | null
    _max: GroupsMaxAggregateOutputType | null
  }

  export type GroupsAvgAggregateOutputType = {
    id: number | null
  }

  export type GroupsSumAggregateOutputType = {
    id: number | null
  }

  export type GroupsMinAggregateOutputType = {
    id: number | null
    name: string | null
    created_at: Date | null
    update_at: Date | null
  }

  export type GroupsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    created_at: Date | null
    update_at: Date | null
  }

  export type GroupsCountAggregateOutputType = {
    id: number
    name: number
    permissions: number
    created_at: number
    update_at: number
    _all: number
  }


  export type GroupsAvgAggregateInputType = {
    id?: true
  }

  export type GroupsSumAggregateInputType = {
    id?: true
  }

  export type GroupsMinAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    update_at?: true
  }

  export type GroupsMaxAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    update_at?: true
  }

  export type GroupsCountAggregateInputType = {
    id?: true
    name?: true
    permissions?: true
    created_at?: true
    update_at?: true
    _all?: true
  }

  export type GroupsAggregateArgs = {
    /**
     * Filter which groups to aggregate.
     * 
    **/
    where?: groupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of groups to fetch.
     * 
    **/
    orderBy?: Enumerable<groupsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: groupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` groups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` groups.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned groups
    **/
    _count?: true | GroupsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GroupsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GroupsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupsMaxAggregateInputType
  }

  export type GetGroupsAggregateType<T extends GroupsAggregateArgs> = {
        [P in keyof T & keyof AggregateGroups]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroups[P]>
      : GetScalarType<T[P], AggregateGroups[P]>
  }




  export type GroupsGroupByArgs = {
    where?: groupsWhereInput
    orderBy?: Enumerable<groupsOrderByWithAggregationInput>
    by: Array<GroupsScalarFieldEnum>
    having?: groupsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupsCountAggregateInputType | true
    _avg?: GroupsAvgAggregateInputType
    _sum?: GroupsSumAggregateInputType
    _min?: GroupsMinAggregateInputType
    _max?: GroupsMaxAggregateInputType
  }


  export type GroupsGroupByOutputType = {
    id: number
    name: string
    permissions: JsonValue
    created_at: Date
    update_at: Date
    _count: GroupsCountAggregateOutputType | null
    _avg: GroupsAvgAggregateOutputType | null
    _sum: GroupsSumAggregateOutputType | null
    _min: GroupsMinAggregateOutputType | null
    _max: GroupsMaxAggregateOutputType | null
  }

  type GetGroupsGroupByPayload<T extends GroupsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<GroupsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupsGroupByOutputType[P]>
            : GetScalarType<T[P], GroupsGroupByOutputType[P]>
        }
      >
    >


  export type groupsSelect = {
    id?: boolean
    name?: boolean
    permissions?: boolean
    created_at?: boolean
    update_at?: boolean
  }

  export type groupsGetPayload<
    S extends boolean | null | undefined | groupsArgs,
    U = keyof S
      > = S extends true
        ? groups
    : S extends undefined
    ? never
    : S extends groupsArgs | groupsFindManyArgs
    ?'include' extends U
    ? groups 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof groups ? groups[P] : never
  } 
    : groups
  : groups


  type groupsCountArgs = Merge<
    Omit<groupsFindManyArgs, 'select' | 'include'> & {
      select?: GroupsCountAggregateInputType | true
    }
  >

  export interface groupsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Groups that matches the filter.
     * @param {groupsFindUniqueArgs} args - Arguments to find a Groups
     * @example
     * // Get one Groups
     * const groups = await prisma.groups.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends groupsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, groupsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'groups'> extends True ? CheckSelect<T, Prisma__groupsClient<groups>, Prisma__groupsClient<groupsGetPayload<T>>> : CheckSelect<T, Prisma__groupsClient<groups | null >, Prisma__groupsClient<groupsGetPayload<T> | null >>

    /**
     * Find the first Groups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groupsFindFirstArgs} args - Arguments to find a Groups
     * @example
     * // Get one Groups
     * const groups = await prisma.groups.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends groupsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, groupsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'groups'> extends True ? CheckSelect<T, Prisma__groupsClient<groups>, Prisma__groupsClient<groupsGetPayload<T>>> : CheckSelect<T, Prisma__groupsClient<groups | null >, Prisma__groupsClient<groupsGetPayload<T> | null >>

    /**
     * Find zero or more Groups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groupsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Groups
     * const groups = await prisma.groups.findMany()
     * 
     * // Get first 10 Groups
     * const groups = await prisma.groups.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groupsWithIdOnly = await prisma.groups.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends groupsFindManyArgs>(
      args?: SelectSubset<T, groupsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<groups>>, PrismaPromise<Array<groupsGetPayload<T>>>>

    /**
     * Create a Groups.
     * @param {groupsCreateArgs} args - Arguments to create a Groups.
     * @example
     * // Create one Groups
     * const Groups = await prisma.groups.create({
     *   data: {
     *     // ... data to create a Groups
     *   }
     * })
     * 
    **/
    create<T extends groupsCreateArgs>(
      args: SelectSubset<T, groupsCreateArgs>
    ): CheckSelect<T, Prisma__groupsClient<groups>, Prisma__groupsClient<groupsGetPayload<T>>>

    /**
     * Create many Groups.
     *     @param {groupsCreateManyArgs} args - Arguments to create many Groups.
     *     @example
     *     // Create many Groups
     *     const groups = await prisma.groups.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends groupsCreateManyArgs>(
      args?: SelectSubset<T, groupsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Groups.
     * @param {groupsDeleteArgs} args - Arguments to delete one Groups.
     * @example
     * // Delete one Groups
     * const Groups = await prisma.groups.delete({
     *   where: {
     *     // ... filter to delete one Groups
     *   }
     * })
     * 
    **/
    delete<T extends groupsDeleteArgs>(
      args: SelectSubset<T, groupsDeleteArgs>
    ): CheckSelect<T, Prisma__groupsClient<groups>, Prisma__groupsClient<groupsGetPayload<T>>>

    /**
     * Update one Groups.
     * @param {groupsUpdateArgs} args - Arguments to update one Groups.
     * @example
     * // Update one Groups
     * const groups = await prisma.groups.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends groupsUpdateArgs>(
      args: SelectSubset<T, groupsUpdateArgs>
    ): CheckSelect<T, Prisma__groupsClient<groups>, Prisma__groupsClient<groupsGetPayload<T>>>

    /**
     * Delete zero or more Groups.
     * @param {groupsDeleteManyArgs} args - Arguments to filter Groups to delete.
     * @example
     * // Delete a few Groups
     * const { count } = await prisma.groups.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends groupsDeleteManyArgs>(
      args?: SelectSubset<T, groupsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groupsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Groups
     * const groups = await prisma.groups.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends groupsUpdateManyArgs>(
      args: SelectSubset<T, groupsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Groups.
     * @param {groupsUpsertArgs} args - Arguments to update or create a Groups.
     * @example
     * // Update or create a Groups
     * const groups = await prisma.groups.upsert({
     *   create: {
     *     // ... data to create a Groups
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Groups we want to update
     *   }
     * })
    **/
    upsert<T extends groupsUpsertArgs>(
      args: SelectSubset<T, groupsUpsertArgs>
    ): CheckSelect<T, Prisma__groupsClient<groups>, Prisma__groupsClient<groupsGetPayload<T>>>

    /**
     * Count the number of Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groupsCountArgs} args - Arguments to filter Groups to count.
     * @example
     * // Count the number of Groups
     * const count = await prisma.groups.count({
     *   where: {
     *     // ... the filter for the Groups we want to count
     *   }
     * })
    **/
    count<T extends groupsCountArgs>(
      args?: Subset<T, groupsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupsAggregateArgs>(args: Subset<T, GroupsAggregateArgs>): PrismaPromise<GetGroupsAggregateType<T>>

    /**
     * Group by Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupsGroupByArgs['orderBy'] }
        : { orderBy?: GroupsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for groups.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__groupsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * groups findUnique
   */
  export type groupsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the groups
     * 
    **/
    select?: groupsSelect | null
    /**
     * Throw an Error if a groups can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which groups to fetch.
     * 
    **/
    where: groupsWhereUniqueInput
  }


  /**
   * groups findFirst
   */
  export type groupsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the groups
     * 
    **/
    select?: groupsSelect | null
    /**
     * Throw an Error if a groups can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which groups to fetch.
     * 
    **/
    where?: groupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of groups to fetch.
     * 
    **/
    orderBy?: Enumerable<groupsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for groups.
     * 
    **/
    cursor?: groupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` groups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` groups.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of groups.
     * 
    **/
    distinct?: Enumerable<GroupsScalarFieldEnum>
  }


  /**
   * groups findMany
   */
  export type groupsFindManyArgs = {
    /**
     * Select specific fields to fetch from the groups
     * 
    **/
    select?: groupsSelect | null
    /**
     * Filter, which groups to fetch.
     * 
    **/
    where?: groupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of groups to fetch.
     * 
    **/
    orderBy?: Enumerable<groupsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing groups.
     * 
    **/
    cursor?: groupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` groups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` groups.
     * 
    **/
    skip?: number
    distinct?: Enumerable<GroupsScalarFieldEnum>
  }


  /**
   * groups create
   */
  export type groupsCreateArgs = {
    /**
     * Select specific fields to fetch from the groups
     * 
    **/
    select?: groupsSelect | null
    /**
     * The data needed to create a groups.
     * 
    **/
    data: XOR<groupsCreateInput, groupsUncheckedCreateInput>
  }


  /**
   * groups createMany
   */
  export type groupsCreateManyArgs = {
    /**
     * The data used to create many groups.
     * 
    **/
    data: Enumerable<groupsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * groups update
   */
  export type groupsUpdateArgs = {
    /**
     * Select specific fields to fetch from the groups
     * 
    **/
    select?: groupsSelect | null
    /**
     * The data needed to update a groups.
     * 
    **/
    data: XOR<groupsUpdateInput, groupsUncheckedUpdateInput>
    /**
     * Choose, which groups to update.
     * 
    **/
    where: groupsWhereUniqueInput
  }


  /**
   * groups updateMany
   */
  export type groupsUpdateManyArgs = {
    /**
     * The data used to update groups.
     * 
    **/
    data: XOR<groupsUpdateManyMutationInput, groupsUncheckedUpdateManyInput>
    /**
     * Filter which groups to update
     * 
    **/
    where?: groupsWhereInput
  }


  /**
   * groups upsert
   */
  export type groupsUpsertArgs = {
    /**
     * Select specific fields to fetch from the groups
     * 
    **/
    select?: groupsSelect | null
    /**
     * The filter to search for the groups to update in case it exists.
     * 
    **/
    where: groupsWhereUniqueInput
    /**
     * In case the groups found by the `where` argument doesn't exist, create a new groups with this data.
     * 
    **/
    create: XOR<groupsCreateInput, groupsUncheckedCreateInput>
    /**
     * In case the groups was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<groupsUpdateInput, groupsUncheckedUpdateInput>
  }


  /**
   * groups delete
   */
  export type groupsDeleteArgs = {
    /**
     * Select specific fields to fetch from the groups
     * 
    **/
    select?: groupsSelect | null
    /**
     * Filter which groups to delete.
     * 
    **/
    where: groupsWhereUniqueInput
  }


  /**
   * groups deleteMany
   */
  export type groupsDeleteManyArgs = {
    /**
     * Filter which groups to delete
     * 
    **/
    where?: groupsWhereInput
  }


  /**
   * groups without action
   */
  export type groupsArgs = {
    /**
     * Select specific fields to fetch from the groups
     * 
    **/
    select?: groupsSelect | null
  }



  /**
   * Model authorization_clients
   */


  export type AggregateAuthorization_clients = {
    _count: Authorization_clientsCountAggregateOutputType | null
    _min: Authorization_clientsMinAggregateOutputType | null
    _max: Authorization_clientsMaxAggregateOutputType | null
  }

  export type Authorization_clientsMinAggregateOutputType = {
    id: string | null
    client_name: string | null
    client_id: string | null
    client_secret: string | null
    scope: string | null
    developer_id: string | null
    avatar: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Authorization_clientsMaxAggregateOutputType = {
    id: string | null
    client_name: string | null
    client_id: string | null
    client_secret: string | null
    scope: string | null
    developer_id: string | null
    avatar: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Authorization_clientsCountAggregateOutputType = {
    id: number
    client_name: number
    client_id: number
    client_secret: number
    scope: number
    developer_id: number
    avatar: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type Authorization_clientsMinAggregateInputType = {
    id?: true
    client_name?: true
    client_id?: true
    client_secret?: true
    scope?: true
    developer_id?: true
    avatar?: true
    created_at?: true
    updated_at?: true
  }

  export type Authorization_clientsMaxAggregateInputType = {
    id?: true
    client_name?: true
    client_id?: true
    client_secret?: true
    scope?: true
    developer_id?: true
    avatar?: true
    created_at?: true
    updated_at?: true
  }

  export type Authorization_clientsCountAggregateInputType = {
    id?: true
    client_name?: true
    client_id?: true
    client_secret?: true
    scope?: true
    developer_id?: true
    avatar?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type Authorization_clientsAggregateArgs = {
    /**
     * Filter which authorization_clients to aggregate.
     * 
    **/
    where?: authorization_clientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of authorization_clients to fetch.
     * 
    **/
    orderBy?: Enumerable<authorization_clientsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: authorization_clientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` authorization_clients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` authorization_clients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned authorization_clients
    **/
    _count?: true | Authorization_clientsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Authorization_clientsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Authorization_clientsMaxAggregateInputType
  }

  export type GetAuthorization_clientsAggregateType<T extends Authorization_clientsAggregateArgs> = {
        [P in keyof T & keyof AggregateAuthorization_clients]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuthorization_clients[P]>
      : GetScalarType<T[P], AggregateAuthorization_clients[P]>
  }




  export type Authorization_clientsGroupByArgs = {
    where?: authorization_clientsWhereInput
    orderBy?: Enumerable<authorization_clientsOrderByWithAggregationInput>
    by: Array<Authorization_clientsScalarFieldEnum>
    having?: authorization_clientsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Authorization_clientsCountAggregateInputType | true
    _min?: Authorization_clientsMinAggregateInputType
    _max?: Authorization_clientsMaxAggregateInputType
  }


  export type Authorization_clientsGroupByOutputType = {
    id: string
    client_name: string
    client_id: string
    client_secret: string
    scope: string
    developer_id: string
    avatar: string
    created_at: Date
    updated_at: Date
    _count: Authorization_clientsCountAggregateOutputType | null
    _min: Authorization_clientsMinAggregateOutputType | null
    _max: Authorization_clientsMaxAggregateOutputType | null
  }

  type GetAuthorization_clientsGroupByPayload<T extends Authorization_clientsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Authorization_clientsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Authorization_clientsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Authorization_clientsGroupByOutputType[P]>
            : GetScalarType<T[P], Authorization_clientsGroupByOutputType[P]>
        }
      >
    >


  export type authorization_clientsSelect = {
    id?: boolean
    client_name?: boolean
    client_id?: boolean
    client_secret?: boolean
    scope?: boolean
    developer_id?: boolean
    avatar?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type authorization_clientsGetPayload<
    S extends boolean | null | undefined | authorization_clientsArgs,
    U = keyof S
      > = S extends true
        ? authorization_clients
    : S extends undefined
    ? never
    : S extends authorization_clientsArgs | authorization_clientsFindManyArgs
    ?'include' extends U
    ? authorization_clients 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof authorization_clients ? authorization_clients[P] : never
  } 
    : authorization_clients
  : authorization_clients


  type authorization_clientsCountArgs = Merge<
    Omit<authorization_clientsFindManyArgs, 'select' | 'include'> & {
      select?: Authorization_clientsCountAggregateInputType | true
    }
  >

  export interface authorization_clientsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Authorization_clients that matches the filter.
     * @param {authorization_clientsFindUniqueArgs} args - Arguments to find a Authorization_clients
     * @example
     * // Get one Authorization_clients
     * const authorization_clients = await prisma.authorization_clients.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends authorization_clientsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, authorization_clientsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'authorization_clients'> extends True ? CheckSelect<T, Prisma__authorization_clientsClient<authorization_clients>, Prisma__authorization_clientsClient<authorization_clientsGetPayload<T>>> : CheckSelect<T, Prisma__authorization_clientsClient<authorization_clients | null >, Prisma__authorization_clientsClient<authorization_clientsGetPayload<T> | null >>

    /**
     * Find the first Authorization_clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authorization_clientsFindFirstArgs} args - Arguments to find a Authorization_clients
     * @example
     * // Get one Authorization_clients
     * const authorization_clients = await prisma.authorization_clients.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends authorization_clientsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, authorization_clientsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'authorization_clients'> extends True ? CheckSelect<T, Prisma__authorization_clientsClient<authorization_clients>, Prisma__authorization_clientsClient<authorization_clientsGetPayload<T>>> : CheckSelect<T, Prisma__authorization_clientsClient<authorization_clients | null >, Prisma__authorization_clientsClient<authorization_clientsGetPayload<T> | null >>

    /**
     * Find zero or more Authorization_clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authorization_clientsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Authorization_clients
     * const authorization_clients = await prisma.authorization_clients.findMany()
     * 
     * // Get first 10 Authorization_clients
     * const authorization_clients = await prisma.authorization_clients.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const authorization_clientsWithIdOnly = await prisma.authorization_clients.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends authorization_clientsFindManyArgs>(
      args?: SelectSubset<T, authorization_clientsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<authorization_clients>>, PrismaPromise<Array<authorization_clientsGetPayload<T>>>>

    /**
     * Create a Authorization_clients.
     * @param {authorization_clientsCreateArgs} args - Arguments to create a Authorization_clients.
     * @example
     * // Create one Authorization_clients
     * const Authorization_clients = await prisma.authorization_clients.create({
     *   data: {
     *     // ... data to create a Authorization_clients
     *   }
     * })
     * 
    **/
    create<T extends authorization_clientsCreateArgs>(
      args: SelectSubset<T, authorization_clientsCreateArgs>
    ): CheckSelect<T, Prisma__authorization_clientsClient<authorization_clients>, Prisma__authorization_clientsClient<authorization_clientsGetPayload<T>>>

    /**
     * Create many Authorization_clients.
     *     @param {authorization_clientsCreateManyArgs} args - Arguments to create many Authorization_clients.
     *     @example
     *     // Create many Authorization_clients
     *     const authorization_clients = await prisma.authorization_clients.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends authorization_clientsCreateManyArgs>(
      args?: SelectSubset<T, authorization_clientsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Authorization_clients.
     * @param {authorization_clientsDeleteArgs} args - Arguments to delete one Authorization_clients.
     * @example
     * // Delete one Authorization_clients
     * const Authorization_clients = await prisma.authorization_clients.delete({
     *   where: {
     *     // ... filter to delete one Authorization_clients
     *   }
     * })
     * 
    **/
    delete<T extends authorization_clientsDeleteArgs>(
      args: SelectSubset<T, authorization_clientsDeleteArgs>
    ): CheckSelect<T, Prisma__authorization_clientsClient<authorization_clients>, Prisma__authorization_clientsClient<authorization_clientsGetPayload<T>>>

    /**
     * Update one Authorization_clients.
     * @param {authorization_clientsUpdateArgs} args - Arguments to update one Authorization_clients.
     * @example
     * // Update one Authorization_clients
     * const authorization_clients = await prisma.authorization_clients.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends authorization_clientsUpdateArgs>(
      args: SelectSubset<T, authorization_clientsUpdateArgs>
    ): CheckSelect<T, Prisma__authorization_clientsClient<authorization_clients>, Prisma__authorization_clientsClient<authorization_clientsGetPayload<T>>>

    /**
     * Delete zero or more Authorization_clients.
     * @param {authorization_clientsDeleteManyArgs} args - Arguments to filter Authorization_clients to delete.
     * @example
     * // Delete a few Authorization_clients
     * const { count } = await prisma.authorization_clients.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends authorization_clientsDeleteManyArgs>(
      args?: SelectSubset<T, authorization_clientsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Authorization_clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authorization_clientsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Authorization_clients
     * const authorization_clients = await prisma.authorization_clients.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends authorization_clientsUpdateManyArgs>(
      args: SelectSubset<T, authorization_clientsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Authorization_clients.
     * @param {authorization_clientsUpsertArgs} args - Arguments to update or create a Authorization_clients.
     * @example
     * // Update or create a Authorization_clients
     * const authorization_clients = await prisma.authorization_clients.upsert({
     *   create: {
     *     // ... data to create a Authorization_clients
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Authorization_clients we want to update
     *   }
     * })
    **/
    upsert<T extends authorization_clientsUpsertArgs>(
      args: SelectSubset<T, authorization_clientsUpsertArgs>
    ): CheckSelect<T, Prisma__authorization_clientsClient<authorization_clients>, Prisma__authorization_clientsClient<authorization_clientsGetPayload<T>>>

    /**
     * Count the number of Authorization_clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authorization_clientsCountArgs} args - Arguments to filter Authorization_clients to count.
     * @example
     * // Count the number of Authorization_clients
     * const count = await prisma.authorization_clients.count({
     *   where: {
     *     // ... the filter for the Authorization_clients we want to count
     *   }
     * })
    **/
    count<T extends authorization_clientsCountArgs>(
      args?: Subset<T, authorization_clientsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Authorization_clientsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Authorization_clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Authorization_clientsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Authorization_clientsAggregateArgs>(args: Subset<T, Authorization_clientsAggregateArgs>): PrismaPromise<GetAuthorization_clientsAggregateType<T>>

    /**
     * Group by Authorization_clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Authorization_clientsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Authorization_clientsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Authorization_clientsGroupByArgs['orderBy'] }
        : { orderBy?: Authorization_clientsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Authorization_clientsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuthorization_clientsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for authorization_clients.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__authorization_clientsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * authorization_clients findUnique
   */
  export type authorization_clientsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the authorization_clients
     * 
    **/
    select?: authorization_clientsSelect | null
    /**
     * Throw an Error if a authorization_clients can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which authorization_clients to fetch.
     * 
    **/
    where: authorization_clientsWhereUniqueInput
  }


  /**
   * authorization_clients findFirst
   */
  export type authorization_clientsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the authorization_clients
     * 
    **/
    select?: authorization_clientsSelect | null
    /**
     * Throw an Error if a authorization_clients can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which authorization_clients to fetch.
     * 
    **/
    where?: authorization_clientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of authorization_clients to fetch.
     * 
    **/
    orderBy?: Enumerable<authorization_clientsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for authorization_clients.
     * 
    **/
    cursor?: authorization_clientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` authorization_clients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` authorization_clients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of authorization_clients.
     * 
    **/
    distinct?: Enumerable<Authorization_clientsScalarFieldEnum>
  }


  /**
   * authorization_clients findMany
   */
  export type authorization_clientsFindManyArgs = {
    /**
     * Select specific fields to fetch from the authorization_clients
     * 
    **/
    select?: authorization_clientsSelect | null
    /**
     * Filter, which authorization_clients to fetch.
     * 
    **/
    where?: authorization_clientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of authorization_clients to fetch.
     * 
    **/
    orderBy?: Enumerable<authorization_clientsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing authorization_clients.
     * 
    **/
    cursor?: authorization_clientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` authorization_clients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` authorization_clients.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Authorization_clientsScalarFieldEnum>
  }


  /**
   * authorization_clients create
   */
  export type authorization_clientsCreateArgs = {
    /**
     * Select specific fields to fetch from the authorization_clients
     * 
    **/
    select?: authorization_clientsSelect | null
    /**
     * The data needed to create a authorization_clients.
     * 
    **/
    data: XOR<authorization_clientsCreateInput, authorization_clientsUncheckedCreateInput>
  }


  /**
   * authorization_clients createMany
   */
  export type authorization_clientsCreateManyArgs = {
    /**
     * The data used to create many authorization_clients.
     * 
    **/
    data: Enumerable<authorization_clientsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * authorization_clients update
   */
  export type authorization_clientsUpdateArgs = {
    /**
     * Select specific fields to fetch from the authorization_clients
     * 
    **/
    select?: authorization_clientsSelect | null
    /**
     * The data needed to update a authorization_clients.
     * 
    **/
    data: XOR<authorization_clientsUpdateInput, authorization_clientsUncheckedUpdateInput>
    /**
     * Choose, which authorization_clients to update.
     * 
    **/
    where: authorization_clientsWhereUniqueInput
  }


  /**
   * authorization_clients updateMany
   */
  export type authorization_clientsUpdateManyArgs = {
    /**
     * The data used to update authorization_clients.
     * 
    **/
    data: XOR<authorization_clientsUpdateManyMutationInput, authorization_clientsUncheckedUpdateManyInput>
    /**
     * Filter which authorization_clients to update
     * 
    **/
    where?: authorization_clientsWhereInput
  }


  /**
   * authorization_clients upsert
   */
  export type authorization_clientsUpsertArgs = {
    /**
     * Select specific fields to fetch from the authorization_clients
     * 
    **/
    select?: authorization_clientsSelect | null
    /**
     * The filter to search for the authorization_clients to update in case it exists.
     * 
    **/
    where: authorization_clientsWhereUniqueInput
    /**
     * In case the authorization_clients found by the `where` argument doesn't exist, create a new authorization_clients with this data.
     * 
    **/
    create: XOR<authorization_clientsCreateInput, authorization_clientsUncheckedCreateInput>
    /**
     * In case the authorization_clients was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<authorization_clientsUpdateInput, authorization_clientsUncheckedUpdateInput>
  }


  /**
   * authorization_clients delete
   */
  export type authorization_clientsDeleteArgs = {
    /**
     * Select specific fields to fetch from the authorization_clients
     * 
    **/
    select?: authorization_clientsSelect | null
    /**
     * Filter which authorization_clients to delete.
     * 
    **/
    where: authorization_clientsWhereUniqueInput
  }


  /**
   * authorization_clients deleteMany
   */
  export type authorization_clientsDeleteManyArgs = {
    /**
     * Filter which authorization_clients to delete
     * 
    **/
    where?: authorization_clientsWhereInput
  }


  /**
   * authorization_clients without action
   */
  export type authorization_clientsArgs = {
    /**
     * Select specific fields to fetch from the authorization_clients
     * 
    **/
    select?: authorization_clientsSelect | null
  }



  /**
   * Model authorization_refresh_codes
   */


  export type AggregateAuthorization_refresh_codes = {
    _count: Authorization_refresh_codesCountAggregateOutputType | null
    _min: Authorization_refresh_codesMinAggregateOutputType | null
    _max: Authorization_refresh_codesMaxAggregateOutputType | null
  }

  export type Authorization_refresh_codesMinAggregateOutputType = {
    id: string | null
    code: string | null
    uid: string | null
    client_id: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Authorization_refresh_codesMaxAggregateOutputType = {
    id: string | null
    code: string | null
    uid: string | null
    client_id: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Authorization_refresh_codesCountAggregateOutputType = {
    id: number
    code: number
    uid: number
    client_id: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type Authorization_refresh_codesMinAggregateInputType = {
    id?: true
    code?: true
    uid?: true
    client_id?: true
    created_at?: true
    updated_at?: true
  }

  export type Authorization_refresh_codesMaxAggregateInputType = {
    id?: true
    code?: true
    uid?: true
    client_id?: true
    created_at?: true
    updated_at?: true
  }

  export type Authorization_refresh_codesCountAggregateInputType = {
    id?: true
    code?: true
    uid?: true
    client_id?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type Authorization_refresh_codesAggregateArgs = {
    /**
     * Filter which authorization_refresh_codes to aggregate.
     * 
    **/
    where?: authorization_refresh_codesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of authorization_refresh_codes to fetch.
     * 
    **/
    orderBy?: Enumerable<authorization_refresh_codesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: authorization_refresh_codesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` authorization_refresh_codes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` authorization_refresh_codes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned authorization_refresh_codes
    **/
    _count?: true | Authorization_refresh_codesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Authorization_refresh_codesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Authorization_refresh_codesMaxAggregateInputType
  }

  export type GetAuthorization_refresh_codesAggregateType<T extends Authorization_refresh_codesAggregateArgs> = {
        [P in keyof T & keyof AggregateAuthorization_refresh_codes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuthorization_refresh_codes[P]>
      : GetScalarType<T[P], AggregateAuthorization_refresh_codes[P]>
  }




  export type Authorization_refresh_codesGroupByArgs = {
    where?: authorization_refresh_codesWhereInput
    orderBy?: Enumerable<authorization_refresh_codesOrderByWithAggregationInput>
    by: Array<Authorization_refresh_codesScalarFieldEnum>
    having?: authorization_refresh_codesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Authorization_refresh_codesCountAggregateInputType | true
    _min?: Authorization_refresh_codesMinAggregateInputType
    _max?: Authorization_refresh_codesMaxAggregateInputType
  }


  export type Authorization_refresh_codesGroupByOutputType = {
    id: string
    code: string
    uid: string
    client_id: string
    created_at: Date
    updated_at: Date
    _count: Authorization_refresh_codesCountAggregateOutputType | null
    _min: Authorization_refresh_codesMinAggregateOutputType | null
    _max: Authorization_refresh_codesMaxAggregateOutputType | null
  }

  type GetAuthorization_refresh_codesGroupByPayload<T extends Authorization_refresh_codesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Authorization_refresh_codesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Authorization_refresh_codesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Authorization_refresh_codesGroupByOutputType[P]>
            : GetScalarType<T[P], Authorization_refresh_codesGroupByOutputType[P]>
        }
      >
    >


  export type authorization_refresh_codesSelect = {
    id?: boolean
    code?: boolean
    uid?: boolean
    client_id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type authorization_refresh_codesGetPayload<
    S extends boolean | null | undefined | authorization_refresh_codesArgs,
    U = keyof S
      > = S extends true
        ? authorization_refresh_codes
    : S extends undefined
    ? never
    : S extends authorization_refresh_codesArgs | authorization_refresh_codesFindManyArgs
    ?'include' extends U
    ? authorization_refresh_codes 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof authorization_refresh_codes ? authorization_refresh_codes[P] : never
  } 
    : authorization_refresh_codes
  : authorization_refresh_codes


  type authorization_refresh_codesCountArgs = Merge<
    Omit<authorization_refresh_codesFindManyArgs, 'select' | 'include'> & {
      select?: Authorization_refresh_codesCountAggregateInputType | true
    }
  >

  export interface authorization_refresh_codesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Authorization_refresh_codes that matches the filter.
     * @param {authorization_refresh_codesFindUniqueArgs} args - Arguments to find a Authorization_refresh_codes
     * @example
     * // Get one Authorization_refresh_codes
     * const authorization_refresh_codes = await prisma.authorization_refresh_codes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends authorization_refresh_codesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, authorization_refresh_codesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'authorization_refresh_codes'> extends True ? CheckSelect<T, Prisma__authorization_refresh_codesClient<authorization_refresh_codes>, Prisma__authorization_refresh_codesClient<authorization_refresh_codesGetPayload<T>>> : CheckSelect<T, Prisma__authorization_refresh_codesClient<authorization_refresh_codes | null >, Prisma__authorization_refresh_codesClient<authorization_refresh_codesGetPayload<T> | null >>

    /**
     * Find the first Authorization_refresh_codes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authorization_refresh_codesFindFirstArgs} args - Arguments to find a Authorization_refresh_codes
     * @example
     * // Get one Authorization_refresh_codes
     * const authorization_refresh_codes = await prisma.authorization_refresh_codes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends authorization_refresh_codesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, authorization_refresh_codesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'authorization_refresh_codes'> extends True ? CheckSelect<T, Prisma__authorization_refresh_codesClient<authorization_refresh_codes>, Prisma__authorization_refresh_codesClient<authorization_refresh_codesGetPayload<T>>> : CheckSelect<T, Prisma__authorization_refresh_codesClient<authorization_refresh_codes | null >, Prisma__authorization_refresh_codesClient<authorization_refresh_codesGetPayload<T> | null >>

    /**
     * Find zero or more Authorization_refresh_codes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authorization_refresh_codesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Authorization_refresh_codes
     * const authorization_refresh_codes = await prisma.authorization_refresh_codes.findMany()
     * 
     * // Get first 10 Authorization_refresh_codes
     * const authorization_refresh_codes = await prisma.authorization_refresh_codes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const authorization_refresh_codesWithIdOnly = await prisma.authorization_refresh_codes.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends authorization_refresh_codesFindManyArgs>(
      args?: SelectSubset<T, authorization_refresh_codesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<authorization_refresh_codes>>, PrismaPromise<Array<authorization_refresh_codesGetPayload<T>>>>

    /**
     * Create a Authorization_refresh_codes.
     * @param {authorization_refresh_codesCreateArgs} args - Arguments to create a Authorization_refresh_codes.
     * @example
     * // Create one Authorization_refresh_codes
     * const Authorization_refresh_codes = await prisma.authorization_refresh_codes.create({
     *   data: {
     *     // ... data to create a Authorization_refresh_codes
     *   }
     * })
     * 
    **/
    create<T extends authorization_refresh_codesCreateArgs>(
      args: SelectSubset<T, authorization_refresh_codesCreateArgs>
    ): CheckSelect<T, Prisma__authorization_refresh_codesClient<authorization_refresh_codes>, Prisma__authorization_refresh_codesClient<authorization_refresh_codesGetPayload<T>>>

    /**
     * Create many Authorization_refresh_codes.
     *     @param {authorization_refresh_codesCreateManyArgs} args - Arguments to create many Authorization_refresh_codes.
     *     @example
     *     // Create many Authorization_refresh_codes
     *     const authorization_refresh_codes = await prisma.authorization_refresh_codes.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends authorization_refresh_codesCreateManyArgs>(
      args?: SelectSubset<T, authorization_refresh_codesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Authorization_refresh_codes.
     * @param {authorization_refresh_codesDeleteArgs} args - Arguments to delete one Authorization_refresh_codes.
     * @example
     * // Delete one Authorization_refresh_codes
     * const Authorization_refresh_codes = await prisma.authorization_refresh_codes.delete({
     *   where: {
     *     // ... filter to delete one Authorization_refresh_codes
     *   }
     * })
     * 
    **/
    delete<T extends authorization_refresh_codesDeleteArgs>(
      args: SelectSubset<T, authorization_refresh_codesDeleteArgs>
    ): CheckSelect<T, Prisma__authorization_refresh_codesClient<authorization_refresh_codes>, Prisma__authorization_refresh_codesClient<authorization_refresh_codesGetPayload<T>>>

    /**
     * Update one Authorization_refresh_codes.
     * @param {authorization_refresh_codesUpdateArgs} args - Arguments to update one Authorization_refresh_codes.
     * @example
     * // Update one Authorization_refresh_codes
     * const authorization_refresh_codes = await prisma.authorization_refresh_codes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends authorization_refresh_codesUpdateArgs>(
      args: SelectSubset<T, authorization_refresh_codesUpdateArgs>
    ): CheckSelect<T, Prisma__authorization_refresh_codesClient<authorization_refresh_codes>, Prisma__authorization_refresh_codesClient<authorization_refresh_codesGetPayload<T>>>

    /**
     * Delete zero or more Authorization_refresh_codes.
     * @param {authorization_refresh_codesDeleteManyArgs} args - Arguments to filter Authorization_refresh_codes to delete.
     * @example
     * // Delete a few Authorization_refresh_codes
     * const { count } = await prisma.authorization_refresh_codes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends authorization_refresh_codesDeleteManyArgs>(
      args?: SelectSubset<T, authorization_refresh_codesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Authorization_refresh_codes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authorization_refresh_codesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Authorization_refresh_codes
     * const authorization_refresh_codes = await prisma.authorization_refresh_codes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends authorization_refresh_codesUpdateManyArgs>(
      args: SelectSubset<T, authorization_refresh_codesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Authorization_refresh_codes.
     * @param {authorization_refresh_codesUpsertArgs} args - Arguments to update or create a Authorization_refresh_codes.
     * @example
     * // Update or create a Authorization_refresh_codes
     * const authorization_refresh_codes = await prisma.authorization_refresh_codes.upsert({
     *   create: {
     *     // ... data to create a Authorization_refresh_codes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Authorization_refresh_codes we want to update
     *   }
     * })
    **/
    upsert<T extends authorization_refresh_codesUpsertArgs>(
      args: SelectSubset<T, authorization_refresh_codesUpsertArgs>
    ): CheckSelect<T, Prisma__authorization_refresh_codesClient<authorization_refresh_codes>, Prisma__authorization_refresh_codesClient<authorization_refresh_codesGetPayload<T>>>

    /**
     * Count the number of Authorization_refresh_codes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authorization_refresh_codesCountArgs} args - Arguments to filter Authorization_refresh_codes to count.
     * @example
     * // Count the number of Authorization_refresh_codes
     * const count = await prisma.authorization_refresh_codes.count({
     *   where: {
     *     // ... the filter for the Authorization_refresh_codes we want to count
     *   }
     * })
    **/
    count<T extends authorization_refresh_codesCountArgs>(
      args?: Subset<T, authorization_refresh_codesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Authorization_refresh_codesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Authorization_refresh_codes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Authorization_refresh_codesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Authorization_refresh_codesAggregateArgs>(args: Subset<T, Authorization_refresh_codesAggregateArgs>): PrismaPromise<GetAuthorization_refresh_codesAggregateType<T>>

    /**
     * Group by Authorization_refresh_codes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Authorization_refresh_codesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Authorization_refresh_codesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Authorization_refresh_codesGroupByArgs['orderBy'] }
        : { orderBy?: Authorization_refresh_codesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Authorization_refresh_codesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuthorization_refresh_codesGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for authorization_refresh_codes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__authorization_refresh_codesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * authorization_refresh_codes findUnique
   */
  export type authorization_refresh_codesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the authorization_refresh_codes
     * 
    **/
    select?: authorization_refresh_codesSelect | null
    /**
     * Throw an Error if a authorization_refresh_codes can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which authorization_refresh_codes to fetch.
     * 
    **/
    where: authorization_refresh_codesWhereUniqueInput
  }


  /**
   * authorization_refresh_codes findFirst
   */
  export type authorization_refresh_codesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the authorization_refresh_codes
     * 
    **/
    select?: authorization_refresh_codesSelect | null
    /**
     * Throw an Error if a authorization_refresh_codes can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which authorization_refresh_codes to fetch.
     * 
    **/
    where?: authorization_refresh_codesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of authorization_refresh_codes to fetch.
     * 
    **/
    orderBy?: Enumerable<authorization_refresh_codesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for authorization_refresh_codes.
     * 
    **/
    cursor?: authorization_refresh_codesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` authorization_refresh_codes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` authorization_refresh_codes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of authorization_refresh_codes.
     * 
    **/
    distinct?: Enumerable<Authorization_refresh_codesScalarFieldEnum>
  }


  /**
   * authorization_refresh_codes findMany
   */
  export type authorization_refresh_codesFindManyArgs = {
    /**
     * Select specific fields to fetch from the authorization_refresh_codes
     * 
    **/
    select?: authorization_refresh_codesSelect | null
    /**
     * Filter, which authorization_refresh_codes to fetch.
     * 
    **/
    where?: authorization_refresh_codesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of authorization_refresh_codes to fetch.
     * 
    **/
    orderBy?: Enumerable<authorization_refresh_codesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing authorization_refresh_codes.
     * 
    **/
    cursor?: authorization_refresh_codesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` authorization_refresh_codes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` authorization_refresh_codes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Authorization_refresh_codesScalarFieldEnum>
  }


  /**
   * authorization_refresh_codes create
   */
  export type authorization_refresh_codesCreateArgs = {
    /**
     * Select specific fields to fetch from the authorization_refresh_codes
     * 
    **/
    select?: authorization_refresh_codesSelect | null
    /**
     * The data needed to create a authorization_refresh_codes.
     * 
    **/
    data: XOR<authorization_refresh_codesCreateInput, authorization_refresh_codesUncheckedCreateInput>
  }


  /**
   * authorization_refresh_codes createMany
   */
  export type authorization_refresh_codesCreateManyArgs = {
    /**
     * The data used to create many authorization_refresh_codes.
     * 
    **/
    data: Enumerable<authorization_refresh_codesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * authorization_refresh_codes update
   */
  export type authorization_refresh_codesUpdateArgs = {
    /**
     * Select specific fields to fetch from the authorization_refresh_codes
     * 
    **/
    select?: authorization_refresh_codesSelect | null
    /**
     * The data needed to update a authorization_refresh_codes.
     * 
    **/
    data: XOR<authorization_refresh_codesUpdateInput, authorization_refresh_codesUncheckedUpdateInput>
    /**
     * Choose, which authorization_refresh_codes to update.
     * 
    **/
    where: authorization_refresh_codesWhereUniqueInput
  }


  /**
   * authorization_refresh_codes updateMany
   */
  export type authorization_refresh_codesUpdateManyArgs = {
    /**
     * The data used to update authorization_refresh_codes.
     * 
    **/
    data: XOR<authorization_refresh_codesUpdateManyMutationInput, authorization_refresh_codesUncheckedUpdateManyInput>
    /**
     * Filter which authorization_refresh_codes to update
     * 
    **/
    where?: authorization_refresh_codesWhereInput
  }


  /**
   * authorization_refresh_codes upsert
   */
  export type authorization_refresh_codesUpsertArgs = {
    /**
     * Select specific fields to fetch from the authorization_refresh_codes
     * 
    **/
    select?: authorization_refresh_codesSelect | null
    /**
     * The filter to search for the authorization_refresh_codes to update in case it exists.
     * 
    **/
    where: authorization_refresh_codesWhereUniqueInput
    /**
     * In case the authorization_refresh_codes found by the `where` argument doesn't exist, create a new authorization_refresh_codes with this data.
     * 
    **/
    create: XOR<authorization_refresh_codesCreateInput, authorization_refresh_codesUncheckedCreateInput>
    /**
     * In case the authorization_refresh_codes was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<authorization_refresh_codesUpdateInput, authorization_refresh_codesUncheckedUpdateInput>
  }


  /**
   * authorization_refresh_codes delete
   */
  export type authorization_refresh_codesDeleteArgs = {
    /**
     * Select specific fields to fetch from the authorization_refresh_codes
     * 
    **/
    select?: authorization_refresh_codesSelect | null
    /**
     * Filter which authorization_refresh_codes to delete.
     * 
    **/
    where: authorization_refresh_codesWhereUniqueInput
  }


  /**
   * authorization_refresh_codes deleteMany
   */
  export type authorization_refresh_codesDeleteManyArgs = {
    /**
     * Filter which authorization_refresh_codes to delete
     * 
    **/
    where?: authorization_refresh_codesWhereInput
  }


  /**
   * authorization_refresh_codes without action
   */
  export type authorization_refresh_codesArgs = {
    /**
     * Select specific fields to fetch from the authorization_refresh_codes
     * 
    **/
    select?: authorization_refresh_codesSelect | null
  }



  /**
   * Model authorization_codes
   */


  export type AggregateAuthorization_codes = {
    _count: Authorization_codesCountAggregateOutputType | null
    _min: Authorization_codesMinAggregateOutputType | null
    _max: Authorization_codesMaxAggregateOutputType | null
  }

  export type Authorization_codesMinAggregateOutputType = {
    id: string | null
    code: string | null
    uid: string | null
    client_id: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Authorization_codesMaxAggregateOutputType = {
    id: string | null
    code: string | null
    uid: string | null
    client_id: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Authorization_codesCountAggregateOutputType = {
    id: number
    code: number
    uid: number
    client_id: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type Authorization_codesMinAggregateInputType = {
    id?: true
    code?: true
    uid?: true
    client_id?: true
    created_at?: true
    updated_at?: true
  }

  export type Authorization_codesMaxAggregateInputType = {
    id?: true
    code?: true
    uid?: true
    client_id?: true
    created_at?: true
    updated_at?: true
  }

  export type Authorization_codesCountAggregateInputType = {
    id?: true
    code?: true
    uid?: true
    client_id?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type Authorization_codesAggregateArgs = {
    /**
     * Filter which authorization_codes to aggregate.
     * 
    **/
    where?: authorization_codesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of authorization_codes to fetch.
     * 
    **/
    orderBy?: Enumerable<authorization_codesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: authorization_codesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` authorization_codes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` authorization_codes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned authorization_codes
    **/
    _count?: true | Authorization_codesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Authorization_codesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Authorization_codesMaxAggregateInputType
  }

  export type GetAuthorization_codesAggregateType<T extends Authorization_codesAggregateArgs> = {
        [P in keyof T & keyof AggregateAuthorization_codes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuthorization_codes[P]>
      : GetScalarType<T[P], AggregateAuthorization_codes[P]>
  }




  export type Authorization_codesGroupByArgs = {
    where?: authorization_codesWhereInput
    orderBy?: Enumerable<authorization_codesOrderByWithAggregationInput>
    by: Array<Authorization_codesScalarFieldEnum>
    having?: authorization_codesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Authorization_codesCountAggregateInputType | true
    _min?: Authorization_codesMinAggregateInputType
    _max?: Authorization_codesMaxAggregateInputType
  }


  export type Authorization_codesGroupByOutputType = {
    id: string
    code: string
    uid: string
    client_id: string
    created_at: Date
    updated_at: Date
    _count: Authorization_codesCountAggregateOutputType | null
    _min: Authorization_codesMinAggregateOutputType | null
    _max: Authorization_codesMaxAggregateOutputType | null
  }

  type GetAuthorization_codesGroupByPayload<T extends Authorization_codesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Authorization_codesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Authorization_codesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Authorization_codesGroupByOutputType[P]>
            : GetScalarType<T[P], Authorization_codesGroupByOutputType[P]>
        }
      >
    >


  export type authorization_codesSelect = {
    id?: boolean
    code?: boolean
    uid?: boolean
    client_id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type authorization_codesGetPayload<
    S extends boolean | null | undefined | authorization_codesArgs,
    U = keyof S
      > = S extends true
        ? authorization_codes
    : S extends undefined
    ? never
    : S extends authorization_codesArgs | authorization_codesFindManyArgs
    ?'include' extends U
    ? authorization_codes 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof authorization_codes ? authorization_codes[P] : never
  } 
    : authorization_codes
  : authorization_codes


  type authorization_codesCountArgs = Merge<
    Omit<authorization_codesFindManyArgs, 'select' | 'include'> & {
      select?: Authorization_codesCountAggregateInputType | true
    }
  >

  export interface authorization_codesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Authorization_codes that matches the filter.
     * @param {authorization_codesFindUniqueArgs} args - Arguments to find a Authorization_codes
     * @example
     * // Get one Authorization_codes
     * const authorization_codes = await prisma.authorization_codes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends authorization_codesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, authorization_codesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'authorization_codes'> extends True ? CheckSelect<T, Prisma__authorization_codesClient<authorization_codes>, Prisma__authorization_codesClient<authorization_codesGetPayload<T>>> : CheckSelect<T, Prisma__authorization_codesClient<authorization_codes | null >, Prisma__authorization_codesClient<authorization_codesGetPayload<T> | null >>

    /**
     * Find the first Authorization_codes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authorization_codesFindFirstArgs} args - Arguments to find a Authorization_codes
     * @example
     * // Get one Authorization_codes
     * const authorization_codes = await prisma.authorization_codes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends authorization_codesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, authorization_codesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'authorization_codes'> extends True ? CheckSelect<T, Prisma__authorization_codesClient<authorization_codes>, Prisma__authorization_codesClient<authorization_codesGetPayload<T>>> : CheckSelect<T, Prisma__authorization_codesClient<authorization_codes | null >, Prisma__authorization_codesClient<authorization_codesGetPayload<T> | null >>

    /**
     * Find zero or more Authorization_codes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authorization_codesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Authorization_codes
     * const authorization_codes = await prisma.authorization_codes.findMany()
     * 
     * // Get first 10 Authorization_codes
     * const authorization_codes = await prisma.authorization_codes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const authorization_codesWithIdOnly = await prisma.authorization_codes.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends authorization_codesFindManyArgs>(
      args?: SelectSubset<T, authorization_codesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<authorization_codes>>, PrismaPromise<Array<authorization_codesGetPayload<T>>>>

    /**
     * Create a Authorization_codes.
     * @param {authorization_codesCreateArgs} args - Arguments to create a Authorization_codes.
     * @example
     * // Create one Authorization_codes
     * const Authorization_codes = await prisma.authorization_codes.create({
     *   data: {
     *     // ... data to create a Authorization_codes
     *   }
     * })
     * 
    **/
    create<T extends authorization_codesCreateArgs>(
      args: SelectSubset<T, authorization_codesCreateArgs>
    ): CheckSelect<T, Prisma__authorization_codesClient<authorization_codes>, Prisma__authorization_codesClient<authorization_codesGetPayload<T>>>

    /**
     * Create many Authorization_codes.
     *     @param {authorization_codesCreateManyArgs} args - Arguments to create many Authorization_codes.
     *     @example
     *     // Create many Authorization_codes
     *     const authorization_codes = await prisma.authorization_codes.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends authorization_codesCreateManyArgs>(
      args?: SelectSubset<T, authorization_codesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Authorization_codes.
     * @param {authorization_codesDeleteArgs} args - Arguments to delete one Authorization_codes.
     * @example
     * // Delete one Authorization_codes
     * const Authorization_codes = await prisma.authorization_codes.delete({
     *   where: {
     *     // ... filter to delete one Authorization_codes
     *   }
     * })
     * 
    **/
    delete<T extends authorization_codesDeleteArgs>(
      args: SelectSubset<T, authorization_codesDeleteArgs>
    ): CheckSelect<T, Prisma__authorization_codesClient<authorization_codes>, Prisma__authorization_codesClient<authorization_codesGetPayload<T>>>

    /**
     * Update one Authorization_codes.
     * @param {authorization_codesUpdateArgs} args - Arguments to update one Authorization_codes.
     * @example
     * // Update one Authorization_codes
     * const authorization_codes = await prisma.authorization_codes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends authorization_codesUpdateArgs>(
      args: SelectSubset<T, authorization_codesUpdateArgs>
    ): CheckSelect<T, Prisma__authorization_codesClient<authorization_codes>, Prisma__authorization_codesClient<authorization_codesGetPayload<T>>>

    /**
     * Delete zero or more Authorization_codes.
     * @param {authorization_codesDeleteManyArgs} args - Arguments to filter Authorization_codes to delete.
     * @example
     * // Delete a few Authorization_codes
     * const { count } = await prisma.authorization_codes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends authorization_codesDeleteManyArgs>(
      args?: SelectSubset<T, authorization_codesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Authorization_codes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authorization_codesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Authorization_codes
     * const authorization_codes = await prisma.authorization_codes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends authorization_codesUpdateManyArgs>(
      args: SelectSubset<T, authorization_codesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Authorization_codes.
     * @param {authorization_codesUpsertArgs} args - Arguments to update or create a Authorization_codes.
     * @example
     * // Update or create a Authorization_codes
     * const authorization_codes = await prisma.authorization_codes.upsert({
     *   create: {
     *     // ... data to create a Authorization_codes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Authorization_codes we want to update
     *   }
     * })
    **/
    upsert<T extends authorization_codesUpsertArgs>(
      args: SelectSubset<T, authorization_codesUpsertArgs>
    ): CheckSelect<T, Prisma__authorization_codesClient<authorization_codes>, Prisma__authorization_codesClient<authorization_codesGetPayload<T>>>

    /**
     * Count the number of Authorization_codes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authorization_codesCountArgs} args - Arguments to filter Authorization_codes to count.
     * @example
     * // Count the number of Authorization_codes
     * const count = await prisma.authorization_codes.count({
     *   where: {
     *     // ... the filter for the Authorization_codes we want to count
     *   }
     * })
    **/
    count<T extends authorization_codesCountArgs>(
      args?: Subset<T, authorization_codesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Authorization_codesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Authorization_codes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Authorization_codesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Authorization_codesAggregateArgs>(args: Subset<T, Authorization_codesAggregateArgs>): PrismaPromise<GetAuthorization_codesAggregateType<T>>

    /**
     * Group by Authorization_codes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Authorization_codesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Authorization_codesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Authorization_codesGroupByArgs['orderBy'] }
        : { orderBy?: Authorization_codesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Authorization_codesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuthorization_codesGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for authorization_codes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__authorization_codesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * authorization_codes findUnique
   */
  export type authorization_codesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the authorization_codes
     * 
    **/
    select?: authorization_codesSelect | null
    /**
     * Throw an Error if a authorization_codes can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which authorization_codes to fetch.
     * 
    **/
    where: authorization_codesWhereUniqueInput
  }


  /**
   * authorization_codes findFirst
   */
  export type authorization_codesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the authorization_codes
     * 
    **/
    select?: authorization_codesSelect | null
    /**
     * Throw an Error if a authorization_codes can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which authorization_codes to fetch.
     * 
    **/
    where?: authorization_codesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of authorization_codes to fetch.
     * 
    **/
    orderBy?: Enumerable<authorization_codesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for authorization_codes.
     * 
    **/
    cursor?: authorization_codesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` authorization_codes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` authorization_codes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of authorization_codes.
     * 
    **/
    distinct?: Enumerable<Authorization_codesScalarFieldEnum>
  }


  /**
   * authorization_codes findMany
   */
  export type authorization_codesFindManyArgs = {
    /**
     * Select specific fields to fetch from the authorization_codes
     * 
    **/
    select?: authorization_codesSelect | null
    /**
     * Filter, which authorization_codes to fetch.
     * 
    **/
    where?: authorization_codesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of authorization_codes to fetch.
     * 
    **/
    orderBy?: Enumerable<authorization_codesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing authorization_codes.
     * 
    **/
    cursor?: authorization_codesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` authorization_codes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` authorization_codes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Authorization_codesScalarFieldEnum>
  }


  /**
   * authorization_codes create
   */
  export type authorization_codesCreateArgs = {
    /**
     * Select specific fields to fetch from the authorization_codes
     * 
    **/
    select?: authorization_codesSelect | null
    /**
     * The data needed to create a authorization_codes.
     * 
    **/
    data: XOR<authorization_codesCreateInput, authorization_codesUncheckedCreateInput>
  }


  /**
   * authorization_codes createMany
   */
  export type authorization_codesCreateManyArgs = {
    /**
     * The data used to create many authorization_codes.
     * 
    **/
    data: Enumerable<authorization_codesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * authorization_codes update
   */
  export type authorization_codesUpdateArgs = {
    /**
     * Select specific fields to fetch from the authorization_codes
     * 
    **/
    select?: authorization_codesSelect | null
    /**
     * The data needed to update a authorization_codes.
     * 
    **/
    data: XOR<authorization_codesUpdateInput, authorization_codesUncheckedUpdateInput>
    /**
     * Choose, which authorization_codes to update.
     * 
    **/
    where: authorization_codesWhereUniqueInput
  }


  /**
   * authorization_codes updateMany
   */
  export type authorization_codesUpdateManyArgs = {
    /**
     * The data used to update authorization_codes.
     * 
    **/
    data: XOR<authorization_codesUpdateManyMutationInput, authorization_codesUncheckedUpdateManyInput>
    /**
     * Filter which authorization_codes to update
     * 
    **/
    where?: authorization_codesWhereInput
  }


  /**
   * authorization_codes upsert
   */
  export type authorization_codesUpsertArgs = {
    /**
     * Select specific fields to fetch from the authorization_codes
     * 
    **/
    select?: authorization_codesSelect | null
    /**
     * The filter to search for the authorization_codes to update in case it exists.
     * 
    **/
    where: authorization_codesWhereUniqueInput
    /**
     * In case the authorization_codes found by the `where` argument doesn't exist, create a new authorization_codes with this data.
     * 
    **/
    create: XOR<authorization_codesCreateInput, authorization_codesUncheckedCreateInput>
    /**
     * In case the authorization_codes was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<authorization_codesUpdateInput, authorization_codesUncheckedUpdateInput>
  }


  /**
   * authorization_codes delete
   */
  export type authorization_codesDeleteArgs = {
    /**
     * Select specific fields to fetch from the authorization_codes
     * 
    **/
    select?: authorization_codesSelect | null
    /**
     * Filter which authorization_codes to delete.
     * 
    **/
    where: authorization_codesWhereUniqueInput
  }


  /**
   * authorization_codes deleteMany
   */
  export type authorization_codesDeleteManyArgs = {
    /**
     * Filter which authorization_codes to delete
     * 
    **/
    where?: authorization_codesWhereInput
  }


  /**
   * authorization_codes without action
   */
  export type authorization_codesArgs = {
    /**
     * Select specific fields to fetch from the authorization_codes
     * 
    **/
    select?: authorization_codesSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UsersScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    group_id: 'group_id',
    created_at: 'created_at',
    update_at: 'update_at'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const GroupsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    permissions: 'permissions',
    created_at: 'created_at',
    update_at: 'update_at'
  };

  export type GroupsScalarFieldEnum = (typeof GroupsScalarFieldEnum)[keyof typeof GroupsScalarFieldEnum]


  export const Authorization_clientsScalarFieldEnum: {
    id: 'id',
    client_name: 'client_name',
    client_id: 'client_id',
    client_secret: 'client_secret',
    scope: 'scope',
    developer_id: 'developer_id',
    avatar: 'avatar',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type Authorization_clientsScalarFieldEnum = (typeof Authorization_clientsScalarFieldEnum)[keyof typeof Authorization_clientsScalarFieldEnum]


  export const Authorization_refresh_codesScalarFieldEnum: {
    id: 'id',
    code: 'code',
    uid: 'uid',
    client_id: 'client_id',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type Authorization_refresh_codesScalarFieldEnum = (typeof Authorization_refresh_codesScalarFieldEnum)[keyof typeof Authorization_refresh_codesScalarFieldEnum]


  export const Authorization_codesScalarFieldEnum: {
    id: 'id',
    code: 'code',
    uid: 'uid',
    client_id: 'client_id',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type Authorization_codesScalarFieldEnum = (typeof Authorization_codesScalarFieldEnum)[keyof typeof Authorization_codesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: 'JsonNull'
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const JsonNullValueFilter: {
    DbNull: 'DbNull',
    JsonNull: 'JsonNull',
    AnyNull: 'AnyNull'
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Deep Input Types
   */


  export type usersWhereInput = {
    AND?: Enumerable<usersWhereInput>
    OR?: Enumerable<usersWhereInput>
    NOT?: Enumerable<usersWhereInput>
    id?: StringFilter | string
    username?: StringFilter | string
    password?: StringFilter | string
    group_id?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    update_at?: DateTimeFilter | Date | string
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    group_id?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type usersWhereUniqueInput = {
    id?: string
    username?: string
  }

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    group_id?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<usersScalarWhereWithAggregatesInput>
    OR?: Enumerable<usersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<usersScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    username?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    group_id?: IntWithAggregatesFilter | number
    created_at?: DateTimeWithAggregatesFilter | Date | string
    update_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type groupsWhereInput = {
    AND?: Enumerable<groupsWhereInput>
    OR?: Enumerable<groupsWhereInput>
    NOT?: Enumerable<groupsWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    permissions?: JsonFilter
    created_at?: DateTimeFilter | Date | string
    update_at?: DateTimeFilter | Date | string
  }

  export type groupsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    permissions?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type groupsWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type groupsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    permissions?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    _count?: groupsCountOrderByAggregateInput
    _avg?: groupsAvgOrderByAggregateInput
    _max?: groupsMaxOrderByAggregateInput
    _min?: groupsMinOrderByAggregateInput
    _sum?: groupsSumOrderByAggregateInput
  }

  export type groupsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<groupsScalarWhereWithAggregatesInput>
    OR?: Enumerable<groupsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<groupsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    permissions?: JsonWithAggregatesFilter
    created_at?: DateTimeWithAggregatesFilter | Date | string
    update_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type authorization_clientsWhereInput = {
    AND?: Enumerable<authorization_clientsWhereInput>
    OR?: Enumerable<authorization_clientsWhereInput>
    NOT?: Enumerable<authorization_clientsWhereInput>
    id?: StringFilter | string
    client_name?: StringFilter | string
    client_id?: StringFilter | string
    client_secret?: StringFilter | string
    scope?: StringFilter | string
    developer_id?: StringFilter | string
    avatar?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
  }

  export type authorization_clientsOrderByWithRelationInput = {
    id?: SortOrder
    client_name?: SortOrder
    client_id?: SortOrder
    client_secret?: SortOrder
    scope?: SortOrder
    developer_id?: SortOrder
    avatar?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type authorization_clientsWhereUniqueInput = {
    id?: string
    client_id?: string
  }

  export type authorization_clientsOrderByWithAggregationInput = {
    id?: SortOrder
    client_name?: SortOrder
    client_id?: SortOrder
    client_secret?: SortOrder
    scope?: SortOrder
    developer_id?: SortOrder
    avatar?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: authorization_clientsCountOrderByAggregateInput
    _max?: authorization_clientsMaxOrderByAggregateInput
    _min?: authorization_clientsMinOrderByAggregateInput
  }

  export type authorization_clientsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<authorization_clientsScalarWhereWithAggregatesInput>
    OR?: Enumerable<authorization_clientsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<authorization_clientsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    client_name?: StringWithAggregatesFilter | string
    client_id?: StringWithAggregatesFilter | string
    client_secret?: StringWithAggregatesFilter | string
    scope?: StringWithAggregatesFilter | string
    developer_id?: StringWithAggregatesFilter | string
    avatar?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type authorization_refresh_codesWhereInput = {
    AND?: Enumerable<authorization_refresh_codesWhereInput>
    OR?: Enumerable<authorization_refresh_codesWhereInput>
    NOT?: Enumerable<authorization_refresh_codesWhereInput>
    id?: StringFilter | string
    code?: StringFilter | string
    uid?: StringFilter | string
    client_id?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
  }

  export type authorization_refresh_codesOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    uid?: SortOrder
    client_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type authorization_refresh_codesWhereUniqueInput = {
    id?: string
    code?: string
  }

  export type authorization_refresh_codesOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    uid?: SortOrder
    client_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: authorization_refresh_codesCountOrderByAggregateInput
    _max?: authorization_refresh_codesMaxOrderByAggregateInput
    _min?: authorization_refresh_codesMinOrderByAggregateInput
  }

  export type authorization_refresh_codesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<authorization_refresh_codesScalarWhereWithAggregatesInput>
    OR?: Enumerable<authorization_refresh_codesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<authorization_refresh_codesScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    code?: StringWithAggregatesFilter | string
    uid?: StringWithAggregatesFilter | string
    client_id?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type authorization_codesWhereInput = {
    AND?: Enumerable<authorization_codesWhereInput>
    OR?: Enumerable<authorization_codesWhereInput>
    NOT?: Enumerable<authorization_codesWhereInput>
    id?: StringFilter | string
    code?: StringFilter | string
    uid?: StringFilter | string
    client_id?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
  }

  export type authorization_codesOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    uid?: SortOrder
    client_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type authorization_codesWhereUniqueInput = {
    id?: string
    code?: string
  }

  export type authorization_codesOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    uid?: SortOrder
    client_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: authorization_codesCountOrderByAggregateInput
    _max?: authorization_codesMaxOrderByAggregateInput
    _min?: authorization_codesMinOrderByAggregateInput
  }

  export type authorization_codesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<authorization_codesScalarWhereWithAggregatesInput>
    OR?: Enumerable<authorization_codesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<authorization_codesScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    code?: StringWithAggregatesFilter | string
    uid?: StringWithAggregatesFilter | string
    client_id?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type usersCreateInput = {
    id: string
    username: string
    password: string
    group_id: number
    created_at?: Date | string
    update_at?: Date | string
  }

  export type usersUncheckedCreateInput = {
    id: string
    username: string
    password: string
    group_id: number
    created_at?: Date | string
    update_at?: Date | string
  }

  export type usersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    group_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    group_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersCreateManyInput = {
    id: string
    username: string
    password: string
    group_id: number
    created_at?: Date | string
    update_at?: Date | string
  }

  export type usersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    group_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    group_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type groupsCreateInput = {
    name: string
    permissions: JsonNullValueInput | InputJsonValue
    created_at?: Date | string
    update_at?: Date | string
  }

  export type groupsUncheckedCreateInput = {
    id?: number
    name: string
    permissions: JsonNullValueInput | InputJsonValue
    created_at?: Date | string
    update_at?: Date | string
  }

  export type groupsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    permissions?: JsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type groupsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    permissions?: JsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type groupsCreateManyInput = {
    id?: number
    name: string
    permissions: JsonNullValueInput | InputJsonValue
    created_at?: Date | string
    update_at?: Date | string
  }

  export type groupsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    permissions?: JsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type groupsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    permissions?: JsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type authorization_clientsCreateInput = {
    id: string
    client_name: string
    client_id: string
    client_secret: string
    scope?: string
    developer_id: string
    avatar?: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type authorization_clientsUncheckedCreateInput = {
    id: string
    client_name: string
    client_id: string
    client_secret: string
    scope?: string
    developer_id: string
    avatar?: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type authorization_clientsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    client_name?: StringFieldUpdateOperationsInput | string
    client_id?: StringFieldUpdateOperationsInput | string
    client_secret?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    developer_id?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type authorization_clientsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    client_name?: StringFieldUpdateOperationsInput | string
    client_id?: StringFieldUpdateOperationsInput | string
    client_secret?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    developer_id?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type authorization_clientsCreateManyInput = {
    id: string
    client_name: string
    client_id: string
    client_secret: string
    scope?: string
    developer_id: string
    avatar?: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type authorization_clientsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    client_name?: StringFieldUpdateOperationsInput | string
    client_id?: StringFieldUpdateOperationsInput | string
    client_secret?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    developer_id?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type authorization_clientsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    client_name?: StringFieldUpdateOperationsInput | string
    client_id?: StringFieldUpdateOperationsInput | string
    client_secret?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    developer_id?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type authorization_refresh_codesCreateInput = {
    id: string
    code: string
    uid: string
    client_id: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type authorization_refresh_codesUncheckedCreateInput = {
    id: string
    code: string
    uid: string
    client_id: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type authorization_refresh_codesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    client_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type authorization_refresh_codesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    client_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type authorization_refresh_codesCreateManyInput = {
    id: string
    code: string
    uid: string
    client_id: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type authorization_refresh_codesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    client_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type authorization_refresh_codesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    client_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type authorization_codesCreateInput = {
    id: string
    code: string
    uid: string
    client_id: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type authorization_codesUncheckedCreateInput = {
    id: string
    code: string
    uid: string
    client_id: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type authorization_codesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    client_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type authorization_codesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    client_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type authorization_codesCreateManyInput = {
    id: string
    code: string
    uid: string
    client_id: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type authorization_codesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    client_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type authorization_codesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    client_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    group_id?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    group_id?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    group_id?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    group_id?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    group_id?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }
  export type JsonFilter = 
    | PatchUndefined<
        Either<Required<JsonFilterBase>, Exclude<keyof Required<JsonFilterBase>, 'path'>>,
        Required<JsonFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase>, 'path'>>

  export type JsonFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
  }

  export type groupsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    permissions?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type groupsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type groupsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type groupsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type groupsSumOrderByAggregateInput = {
    id?: SortOrder
  }
  export type JsonWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase>, Exclude<keyof Required<JsonWithAggregatesFilterBase>, 'path'>>,
        Required<JsonWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase>, 'path'>>

  export type JsonWithAggregatesFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
    _count?: NestedIntFilter
    _min?: NestedJsonFilter
    _max?: NestedJsonFilter
  }

  export type authorization_clientsCountOrderByAggregateInput = {
    id?: SortOrder
    client_name?: SortOrder
    client_id?: SortOrder
    client_secret?: SortOrder
    scope?: SortOrder
    developer_id?: SortOrder
    avatar?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type authorization_clientsMaxOrderByAggregateInput = {
    id?: SortOrder
    client_name?: SortOrder
    client_id?: SortOrder
    client_secret?: SortOrder
    scope?: SortOrder
    developer_id?: SortOrder
    avatar?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type authorization_clientsMinOrderByAggregateInput = {
    id?: SortOrder
    client_name?: SortOrder
    client_id?: SortOrder
    client_secret?: SortOrder
    scope?: SortOrder
    developer_id?: SortOrder
    avatar?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type authorization_refresh_codesCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    uid?: SortOrder
    client_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type authorization_refresh_codesMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    uid?: SortOrder
    client_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type authorization_refresh_codesMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    uid?: SortOrder
    client_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type authorization_codesCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    uid?: SortOrder
    client_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type authorization_codesMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    uid?: SortOrder
    client_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type authorization_codesMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    uid?: SortOrder
    client_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }
  export type NestedJsonFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase>, Exclude<keyof Required<NestedJsonFilterBase>, 'path'>>,
        Required<NestedJsonFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase>, 'path'>>

  export type NestedJsonFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}